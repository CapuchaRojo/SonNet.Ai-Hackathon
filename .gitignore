# Ignore system folders
Application Data/
Cookies/
Local Settings/
My Documents/
Downloads/

# Ignore environment folders
.aws/
.vscode/
.node_repl_history/
node_modules/
.venv/

# Ignore other unnecessary files
*.log
*.bak

# Ignore OneDrive Folders
OneDrive/
OneDrive - a Storms is Coming LLC/

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
*.pyc
*.pyo
*.pyd

*.sublime-workspace
*.sublime-project

# C extensions
*.so

*.log

*.bak
*.swp
*.swo
*.swn

# Ignore OneDrive and Dropbox Folders
OneDrive/
Dropbox/

# Ignore DynamoPro (or similar project folders)
DynamoPro/

# Ignore System and User-specific files
NTUSER.DAT
NTUSER.DAT*
Favorites/
Links/
Music/

# Ignore temporary, hidden, or unneeded system files
ExAllocatePool2
ExAllocatePoolWithQuotaTag
ExAllocatePoolWithTag
*.blf
*.regtrans-ms
*.bak
*.swp
*.log

# Ignore other personal or irrelevant files
"IFRAMIE NEEDEDD  landing page back.txt"
"K"
"KO*"

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
.env/ 
env/
venv/
ENV/
env.bak/
venv.bak/
venv/
.env.*
*.env.local
*.env

*.json
*.yaml
*.yml
*.key

*.bin
*.hex
*.e;f
*.fw

Pipfile.lock
poetry.lock

.github/

docs/_build/

node_modules/
npm-debug.log
yarn-erro.log


.idea/
.vscode/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

.ipynb_checkpoints

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

Thumbs.db
*~
.Ds_Stoe

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# PyPI configuration file
.pypirc

*.log

*.bak
*.swp

.env
.env.*

*.sqlite
*.db

*.tar.gz
*.zip

build/
dist/
*.egg
-info/

.coverage
.hypothesis/
.tox/
.nox/
.coverage.*

pipfile.lock
poetry.lock

.github/workflows/

# Ignore OneDrive and other personal folders
OneDrive/
OneDrive/loop.png

# Ignore user directories and system folders
Saved Games/
Searches/
Videos/

# Ignore project directories
SonNetAi/
Space-Monkeys/
Tracing/
USAi/
Usb.WdfBulkReadPipe
agent-in-the-loop/
application/
checkpoints/
config/

# Ignore device and system-related files
WDFDEVICE
WDFDRIVER
WDFFILEOBJECT
WDFQUEUE

# Ignore files related to configuration or temporary operations
_netrc
curl -X POST httpsus-south.ml.cloud.txt
dev/

